# -*- python -*-
# ex: set syntax=python:

# TODO
# - setup scheduler for tags (master)
# - setup scheduler for commits (next)
# - fake repository to test
# - fix mergechanges step
# - test debian build steps http://docs.buildbot.net/latest/manual/cfg-buildsteps.html#debian-build-steps
# - add auth for ORNis
# - re-enable IRC bot
# - split and version conffiles
# - apache VHOST
# - cron check & restart

# IMPORT
import glob
from buildbot.buildslave import BuildSlave
from buildbot.changes.gitpoller import GitPoller
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand, SetPropertyFromCommand
from buildbot.process.properties import WithProperties, Property
from buildbot.steps.slave import RemoveDirectory
from buildbot.config import BuilderConfig
# END IMPORT


slaves = ["slave1"]
packages = ["archeos-meta", "archeos-manual", "archeos-desktop"]
builders = []
for p in packages:
    for slave in slaves:
        name = p + "-" + slave
        builders.append(name)
c = BuildmasterConfig = {}

# SLAVES

from secret import slave_credentials

c['slaves'] = []
for slave in slave_credentials:
    c['slaves'].append(BuildSlave(slave))

c['protocols'] = {'pb': {'port': 9989}}

# END SLAVES


# CHANGESOURCES

c['change_source'] = []
c['change_source'].append(GitPoller(
        'git://github.com/archeos/archeos-manuals.git',
        workdir='/home/builder/buildbot/gitpoller/archeos-manual/',
        branches=True,
        pollinterval=300))
c['change_source'].append(GitPoller(
        'git://github.com/archeos/archeos-meta.git',
        workdir='/home/builder/buildbot/gitpoller/archeos-meta/',
        branches=True,
        pollinterval=300))

c['change_source'].append(GitPoller(
        'git://github.com/archeos/archeos-desktop.git',
        workdir='/home/builder/buildbot/gitpoller/archeos-desktop/',
        branches=True,
        pollinterval=300))

# END CHANGESOURCES


# SCHEDULERS
c['schedulers'] = []
for p in packages:
    names = []
    for slave in slaves:
        names.append(p + "-" + slave)
    c['schedulers'].append(SingleBranchScheduler(
        name=p,
        change_filter=filter.ChangeFilter(project=p,branch_re='.*'),
        treeStableTimer=None,
        builderNames=names))

    c['schedulers'].append(ForceScheduler(
        name=p+'-force',
        builderNames=names))


# FACTORIES

### COMMON STEPS
build_area = "/home/builder/build-area/autobuild"

class NecessaryCommand(ShellCommand):
    def __init__(self, **kw):
        if 'description' not in kw and 'name' in kw:
            kw['description'] = kw['name']
        ShellCommand.__init__(self, **kw)
    haltOnFailure = True

def gbp(arch=None,package=None,distribution='wheezy'):
    '''
    Simple Helper
    ''' 
    name = "gbp_" + arch
    description = "GBP {0} for {1}".format(package, arch)
    git_arch = "--git-arch={0}".format(arch)
    distribution = "--git-dist={0}".format(distribution)
    export_dir = "--git-export-dir={0}/{1}".format(build_area, package)
    s = NecessaryCommand(name=name,
                     haltOnFailure=True,
                     description=description,
                     command=['git-buildpackage',
                              git_arch,
                              '--git-pbuilder',
                              distribution,
                              export_dir])
    return s

def common_package_step(factory, package_name):
    '''
    Common package steps for debian
    '''
    s = "{0}/{1}/*changes".format(build_area,package_name)
    changes = glob.glob(s)
    print 'Changes: ' + str(changes)
    factory.addStep(gbp(arch='amd64',package=package_name))
    factory.addStep(gbp(arch='i386',package=package_name))
    factory.addStep(NecessaryCommand(name="mergechanges",command=["/usr/bin/mergechanges", "-f", changes]))
    # First merge, test and upload!
    factory.addStep(RemoveDirectory(dir=build_area + "/" + package_name))

### END COMMON STEP

# STARTING FACTORIES DEFINITIONS
factory = {}
p='archeos-meta'
factory[p]= BuildFactory()
factory[p].workdir=p
factory[p].addStep(Git(repourl='git://github.com/archeos/archeos-meta.git',
                               mode='full'))
common_package_step(factory=factory[p], package_name=p)

p='archeos-manual'
factory[p]= BuildFactory()
factory[p].workdir=p
factory[p].addStep(Git(repourl='git://github.com/archeos/archeos-manual.git',
                               mode='full'))
common_package_step(factory=factory[p],package_name=p)

p='archeos-desktop'
factory[p]= BuildFactory()
factory[p].workdir=p
factory[p].addStep(Git(repourl='git://github.com/archeos/archeos-desktop.git',
                               mode='full'))
common_package_step(factory=factory[p],package_name=p)
# END FACTORIES

# START BUILDERS
c['builders'] = []
for p in packages:
    for slave in slaves:
        name = p+"-"+slave
        c['builders'].append(
            BuilderConfig(name=name,
                          slavenames=slave,
                          factory=factory[p]))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

from secret import webauth

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

basic_auth = []
for k, v in webauth.iteritems():
    basic_auth.append((k, v))
 
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth(basic_auth),
    gracefulShutdown = True,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

from buildbot.status import words
#c['status'].append(words.IRC(host="irc.freenode.org", nick="archeos-buildbot",
#                             channels=["#archeos"]))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "ArcheOS builder"
c['titleURL'] = "http://www.archeos.eu"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}

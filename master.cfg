# -*- python -*-
# ex: set syntax=python:

# TODO
# - setup scheduler for tags (master)
# - setup scheduler for commits (next)
# - fix mergechanges step
# - test debian build steps http://docs.buildbot.net/latest/manual/cfg-buildsteps.html#debian-build-steps
# - re-enable IRC bot
# - cron check & restart

# IMPORT
import glob
from buildbot.buildslave import BuildSlave
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.package.deb.pbuilder import DebCowbuilder
from buildbot.steps.package.deb.lintian import DebLintian
from buildbot.steps.shell import ShellCommand, SetPropertyFromCommand
from buildbot.process.properties import WithProperties, Property, Interpolate
from buildbot.steps.slave import RemoveDirectory
from buildbot.config import BuilderConfig
from buildbot.status import words
import BuildbotStatusShields as shields
import sys, os
sys.path.append(os.path.join(os.path.dirname(__file__), 'buildbot-config'))
from archeos_secret import slave_cred
from archeos_repos import all_repos as repos
from archeos_sources import sources
from archeos_auth import all_auth
# END IMPORT

build_area = "/home/builder/build-area/autobuild"
c = BuildmasterConfig = {}

# MISC
c['title'] = "ArcheOS builder"
c['titleURL'] = "http://www.archeos.eu"
c['buildbotURL'] = "http://localhost:8010/"
c['db'] = {'db_url' : "sqlite:///state.sqlite"}
c['protocols'] = {'pb': {'port': 9989}}
# END MISC

# SLAVES
c['slaves'] = []
for slave in slave_cred:
    c['slaves'].append(BuildSlave(slave[0], slave[1]))
# END SLAVES

# CHANGESOURCES
c['change_source'] = []
for source in sources:
    c['change_source'].append(source)
# END CHANGESOURCES

# SCHEDULERS
c['schedulers'] = []
for p in repos.keys():
    names = []
    
    # all builders are triggered
    for slave in slave_cred:
        names.append(p + "-" + slave[0])

    # This is for all projects, on branch master
    c['schedulers'].append(SingleBranchScheduler(
        name=p,
        change_filter=filter.ChangeFilter(project=p,branch='master'),
        builderNames=names)
        )

    c['schedulers'].append(ForceScheduler(
        name=p+'-force',
        builderNames=names))

# c['schedulers'].append(SingleBranchScheduler(
#     name='test',
#     builderNames=['test-repos-slave1'],
#     change_filter=filter.ChangeFilter(branch='master')
# ))

# FACTORIES

### COMMON STEPS
class NecessaryCommand(ShellCommand):
    def __init__(self, **kw):
        if 'description' not in kw and 'name' in kw:
            kw['description'] = kw['name']
        ShellCommand.__init__(self, **kw)
    haltOnFailure = True

def gbp(arch=None,package=None,distribution='wheezy'):
    '''
    Simple Helper
    ''' 
    name = "gbp_" + arch
    description = "GBP {0} for {1}".format(package, arch)
    git_arch = "--git-arch={0}".format(arch)
    distribution = "--git-dist={0}".format(distribution)
    export_dir = "--git-export-dir={0}/{1}".format(build_area, package)
    upstream_tree = "--git-upstream-tree=master"
    s = NecessaryCommand(name=name,
                     haltOnFailure=True,
                     description=description,
                     command=['git-buildpackage',
                              git_arch,
                              '--git-pbuilder',
                              upstream_tree,
                              distribution,
                              export_dir])
    return s

def common_package_step(factory, package_name):
    '''
    Common package steps
    '''
    factory.addStep(gbp(arch='amd64',package=package_name))
    factory.addStep(gbp(arch='i386',package=package_name))
    # s = "{0}/{1}/*[amd64,i386].changes".format(build_area,package_name)
    # changes = glob.glob(s)
    # factory.addStep(NecessaryCommand(name="mergechanges",command=["/usr/bin/mergechanges", "-f", changes]))
    # multi_changes = glob.glob("{0}/{1}/*.multi.changes".format(build_area,package_name))
    # factory.addStep(NecessaryCommand(name="lintian on multi changes",command=["lintian", multi_changes]))
    # First merge, test and upload!
    factory.addStep(RemoveDirectory(dir=build_area + "/" + package_name))

### END COMMON STEP

# STARTING FACTORIES DEFINITIONS
factory = {}
p='archeos-meta'
factory[p]= BuildFactory()
factory[p].workdir=p
factory[p].addStep(Git(repourl='git://github.com/archeos/archeos-meta.git',
                               mode='full'))
common_package_step(factory=factory[p], package_name=p)

p='archeos-manual'
factory[p]= BuildFactory()
factory[p].workdir=p
factory[p].addStep(Git(repourl='git://github.com/archeos/archeos-manual.git',
                               mode='full'))
common_package_step(factory=factory[p],package_name=p)

p='archeos-desktop'
factory[p]= BuildFactory()
factory[p].workdir=p
factory[p].addStep(Git(repourl='git://github.com/archeos/archeos-desktop.git',
                               mode='full'))
common_package_step(factory=factory[p],package_name=p)

p='cloudcompare-archeos'
factory[p] = BuildFactory()
factory[p].workdir=p
factory[p].addStep(Git(repourl='git://github.com/archeos/cloudcompare-archeos.git',
                       mode='full'))
common_package_step(factory=factory[p],package_name=p)

p='test-repos'
factory[p] = BuildFactory()
factory[p].workdir=p
factory[p].addStep(Git(repourl='git://github.com/fabfurnari/test-repos.git',
                       mode='full'))
factory[p].addStep(RemoveDirectory(dir=build_area + "/" + p))

p='archeos-keyring'
factory[p] = BuildFactory()
factory[p].workdir=p
factory[p].addStep(Git(repourl='git://github.com/archeos/archeos-keyring.git',
                       mode='full'))
common_package_step(factory=factory[p],package_name=p)

p='archeos-menu'
factory[p] = BuildFactory()
factory[p].workdir=p
factory[p].addStep(Git(repourl='git://github.com/archeos/archeos-menu.git',
                       mode='full'))
common_package_step(factory=factory[p],package_name=p)

p='totalopenstation'
factory[p] = BuildFactory()
factory[p].workdir=p
factory[p].addStep(Git(repourl='git://github.com/archeos/totalopenstation.git',
                       mode='full'))
common_package_step(factory=factory[p],package_name=p)


# END FACTORIES

# START BUILDERS
c['builders'] = []
for p in repos.keys():
    for slave in slave_cred:
        name = p+"-"+slave[0]
        c['builders'].append(
            BuilderConfig(name=name,
                          slavenames=slave[0],
                          factory=factory[p]))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.



c['status'] = []
for auth in all_auth:
    c['status'].append(shields.bind(auth))

c['status'].append(words.IRC(host="irc.freenode.org", nick="archeos-buildbot",
                             channels=["#archeos"]))

